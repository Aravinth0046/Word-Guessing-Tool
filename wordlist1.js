const cProgrammingQuestions = [
    { word: "c", hint: "Procedural programming language" },
    { word: "printf", hint: "Function to display output" },
    { word: "scanf", hint: "Function to read input" },
    { word: "int", hint: "Data type for integers" },
    { word: "float", hint: "Data type for floatingpoint numbers" },
    { word: "char", hint: "Data type for characters" },
    { word: "if", hint: "Conditional statement" },
    { word: "else", hint: "Conditional statement alternative" },
    { word: "while", hint: "Looping structure" },
    { word: "for", hint: "Looping structure for iteration" },
    { word: "switch", hint: "Multiway conditional statement" },
    { word: "break", hint: "Exit loop or switch statement" },
    { word: "continue", hint: "Skip the rest of a loops code" },
    { word: "return", hint: "Exit function and return a value" },
    { word: "array", hint: "Collection of similar data items" },
    { word: "pointer", hint: "Variable that stores the address of another variable" },
    { word: "function", hint: "Reusable block of code" },
    { word: "struct", hint: "Group of variables under a single name" },
    { word: "typedef", hint: "Create new data type names" },
    { word: "enum", hint: "Userdefined data type with named values" },
    { word: "malloc", hint: "Allocate memory dynamically" },
    { word: "free", hint: "Deallocate memory" },
    { word: "file", hint: "Data storage in C programming" },
    { word: "fopen", hint: "Open a file" },
    { word: "fclose", hint: "Close a file" },
    { word: "fprintf", hint: "Print formatted output to a file" },
    { word: "fscanf", hint: "Read formatted input from a file" },
    { word: "struct", hint: "Define a structure" },
    { word: "union", hint: "Define a union" },
    { word: "sizeof", hint: "Size of a data type or object" },
    { word: "const", hint: "Declare a constant" },
    { word: "volatile", hint: "Declare a volatile variable" },
    { word: "static", hint: "Declare a static variable or function" },
    { word: "break", hint: "Exit loop or switch statement" },
    { word: "continue", hint: "Skip the rest of a loops code" },
    { word: "return", hint: "Exit function and return a value" },
    { word: "preprocessor", hint: "Directives processed before actual compilation" },
    { word: "macro", hint: "A fragment of code which has been given a name" },
    { word: "headerfile", hint: "File with declarations for other files" },
    { word: "include", hint: "Insert a files content in another file" },
    { word: "define", hint: "Define a macro" },
    { word: "undef", hint: "Undefine a macro" },
    { word: "ifdef", hint: "If defined conditional compilation" },
    { word: "ifndef", hint: "If not defined conditional compilation" },
    { word: "defined", hint: "Check if a macro is defined" },
    { word: "dowhile", hint: "Looping structure with postcondition" },
    { word: "goto", hint: "Jump to a labeled statement" },
    { word: "constpointer", hint: "Pointer to constant data" },
    { word: "pointertoconst", hint: "Constant pointer" },
    { word: "pointertofunction", hint: "Pointer that points to a function" },
    { word: "string", hint: "Array of characters" },
    { word: "strlen", hint: "Get the length of a string" },
    { word: "strcpy", hint: "Copy a string" },
    { word: "strcat", hint: "Concatenate two strings" },
    { word: "strcmp", hint: "Compare two strings" },
    { word: "strstr", hint: "Find the first occurrence of a substring" },
    { word: "strtok", hint: "Tokenize a string" },
    { word: "recursivefunction", hint: "A function that calls itself" },
    { word: "binarysearch", hint: "Search algorithm for sorted arrays" },
    { word: "bubblesort", hint: "Simple sorting algorithm" },
    { word: "linkedlist", hint: "Data structure with nodes linked to each other" },
    { word: "stack", hint: "Data structure with Last In First Out (LIFO) order" },
    { word: "queue", hint: "Data structure with First In First Out (FIFO) order" },
    { word: "tree", hint: "Hierarchical data structure" },
    { word: "recursion", hint: "Function calling itself" },
    { word: "bitwiseoperators", hint: "Operators that work on individual bits" },
    { word: "typedef", hint: "Define a new type name" },
    { word: "null", hint: "Null pointer" },
    { word: "staticvariable", hint: "Variable that retains its value between function calls" },
    { word: "typecasting", hint: "Converting one data type to another" },
    { word: "malloc", hint: "Allocate memory dynamically" },
    { word: "free", hint: "Deallocate memory" },
    { word: "filehandling", hint: "Working with files in C" },
    { word: "binaryfile", hint: "File containing data in a format other than text" },
    { word: "ascii", hint: "American Standard Code for Information Interchange" },
    { word: "bitwiseshift", hint: "Shift bits to the left or right" },
    { word: "volatile", hint: "Declare a variable as volatile" },
    { word: "staticfunction", hint: "Function accessible only within the file its declared" },
    { word: "enumeration", hint: "Userdefined data type with named values" },
    { word: "structure", hint: "Userdefined data type combining different data types" },
    { word: "union", hint: "Userdefined data type that stores different data types in the same memory location" },
    { word: "constkeyword", hint: "Declare a constant" },
    { word: "macr osinc", hint: "Preprocessor directives that perform text replacement" },
    { word: "headerfilesinc", hint: "Files with declarations for other files" },
    { word: "sizeofoperator", hint: "Get the size of a data type or object" },
    { word: "constvsvolatile", hint: "Differences between const and volatile keywords" },
    { word: "recursioninc", hint: "Function calling itself" },
    { word: "searchingalgorithmsinc", hint: "Algorithms to search for an element in a data structure" },
    { word: "sortingalgorithmsinc", hint: "Algorithms to arrange elements in a specific order" },
    { word: "datastructuresinc", hint: "Organized collections of data" },
    { word: "linkedlistinc", hint: "Linear data structure with nodes linked to each other" },
    { word: "stackinc", hint: "Data structure with Last In First Out (LIFO) order" },
    { word: "queueinc", hint: "Data structure with First In First Out (FIFO) order" },
    { word: "treeinc", hint: "Hierarchical data structure" },
    { word: "bitmanipulationinc", hint: "Perform operations on individual bits" },
    { word: "typecastinginc", hint: "Convert one data type to another" },
    { word: "memoryallocationinc", hint: "Allocate and deallocate memory during program execution" },
    { word: "filehandlinginc", hint: "Reading from and writing to files" },
    { word: "preprocessordirectivesinc", hint: "Instructions processed before actual compilation" },
    { word: "commandlineargumentsinc", hint: "Arguments passed to a program from the command line" },
];


